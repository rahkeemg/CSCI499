package java_gram;

import java.util.regex.*;
import org.antlr.v4.runtime.TokenStream;
import org.json.simple.*;
/**
 * @author rahkeemg This class extends JavaBaseListener generated by ANTLR4.5.1
 */
public class ProgramListener extends JavaBaseListener {
	JavaParser parser;
	private FileObject file;
	
	// Constructor with parameter
	public ProgramListener(JavaParser parser) {
		this.parser = parser;
	}
	
	// Listens for parser entering compilationUnit
	@Override
	public void enterCompilationUnit(JavaParser.CompilationUnitContext ctx) {

		//First, get the tokens and pass them into stats object to generate tally
		TokenStream tokens = parser.getTokenStream();
		Stats s = new Stats(tokens, tokens.get(0), tokens.get(tokens.size()- 1));
		s.count();
		
		MetricsObj metrics = new MetricsObj();
		metrics.addMetrics(s);

		file = new FileObject();
		file.setMetrics(metrics);
	}
	
	@Override
	public void exitCompilationUnit(java_gram.JavaParser.CompilationUnitContext ctx)
	{
		file.generate();
		System.out.println(file.toJSONString());
	}

	@Override
	public void enterConstructorDeclaration(JavaParser.ConstructorDeclarationContext ctx) {
//		System.out.println(ctx.getRuleContext().getText());
		TokenStream tokens = parser.getTokenStream();
		Stats s = new Stats(tokens, ctx.getStart(), ctx.getStop());
		s.count();
//		System.out.println(ctx.getStart() + "\n" + ctx.getStop());
//		System.out.println(tokens.getText(ctx));	

		//Create file item object for Constructor
		FileItem f_item =  new FileItem();
		
		//Create metric object for Constructor
		MetricsObj metrics =  new MetricsObj();
		metrics.addMetrics(s);	
		
		f_item.setName(ctx.Identifier().getText() + "" + ctx.formalParameters().getText());
		f_item.setMetric(metrics);
		f_item.generate();

		file.addFileItem(f_item);
	}

	/** Listens for the enter class declaration */
	@Override
	public void enterClassDeclaration(JavaParser.ClassDeclarationContext ctx) {
		
		TokenStream tokens = parser.getTokenStream();
		Stats s = new Stats(tokens, ctx.getStart(), ctx.getStop());
		
		//Create file item object for Class Rule
		FileItem f_item =  new FileItem();
		
		//Create metric object for Class being visited
		MetricsObj metrics =  new MetricsObj();
		metrics.addMetrics(s);	
		
		f_item.setName(ctx.Identifier().getText());
		f_item.setMetric(metrics);
		f_item.generate();
		
		file.addFileItem(f_item);
	}
	
	/** Listens for exit class declaration */
	@Override
	public void exitClassDeclaration(JavaParser.ClassDeclarationContext ctx) {}

	
	/** Listen to matches of methodDeclaration */
	@Override
	public void enterMethodDeclaration(JavaParser.MethodDeclarationContext ctx) {

		TokenStream tokens = parser.getTokenStream();
		Stats s = new Stats(tokens, ctx.getStart(), ctx.getStop());
		
		//Create file item object for Constructor
		FileItem f_item =  new FileItem();
		
		//Create metric object for Constructor
		MetricsObj metrics =  new MetricsObj();
		metrics.addMetrics(s);	
		
		f_item.setName(ctx.Identifier().getText() + "" + ctx.formalParameters().getText());
		f_item.setMetric(metrics);
		f_item.generate();
	
		file.addFileItem(f_item);
	}

	/** Listen to matches of exit methodDeclaration */
	@Override
	public void exitMethodDeclaration(JavaParser.MethodDeclarationContext ctx) {}

	@Override
	public void enterInterfaceDeclaration(JavaParser.InterfaceDeclarationContext ctx) { 
		TokenStream tokens = parser.getTokenStream();

		Stats s = new Stats(tokens, ctx.getStart(), ctx.getStop());
		s.count();
	}
	
	/** Listens for interface method declaration call */
	@Override
	public void enterInterfaceMethodDeclaration( JavaParser.InterfaceMethodDeclarationContext ctx) {

		TokenStream tokens = parser.getTokenStream();
		Stats s = new Stats(tokens, ctx.getStart(), ctx.getStop());
		s.count();
		
		//Create file item object for Constructor
		FileItem f_item =  new FileItem();
		
		//Create metric object for Constructor
		MetricsObj metrics =  new MetricsObj();
		metrics.addMetrics(s);	
		
		f_item.setName(ctx.Identifier().getText() + "" + ctx.formalParameters().getText());
		f_item.setMetric(metrics);
		f_item.generate();
	
		file.addFileItem(f_item);
	}
	
	/** Listen to matches of enterStatement */
	@Override
	public void enterStatement(JavaParser.StatementContext ctx) {}

	/** Listen to matches of exitStatement */
	@Override
	public void exitStatement(JavaParser.StatementContext ctx) {}
}
